workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: never  # Prevent pipeline run for push event
    - when: always # Run pipeline for all other cases

android-release:
  stage: build
  tags:
    - macos
  script:
    - npm install
    - mkdir -p release/android
    - cd ./android
    - ./gradlew assembleRelease
    - apksigner sign --ks-pass env:KEYSTORE_PASS --ks ~/SocialSavanna.jks --out ./app/build/outputs/apk/release/app-release.apk ./app/build/outputs/apk/release/app-release-unsigned.apk
    - apksigner verify ./app/build/outputs/apk/release/app-release.apk
    - cp -R ./app/build/outputs/apk/release/* ../release/android/
  artifacts:
    paths:
      - release/android

ios-release:
  stage: build
  tags:
    - macos
  script:
    - export VERSION=$(node -pe "require('./package.json').version")
    - npm install
    - mkdir -p release/ios
    - cd ./ios
    - pod install
    - xcodebuild -workspace SoSa.xcworkspace -scheme SoSa clean archive -configuration release -sdk iphoneos -archivePath SoSa.xcarchive -allowProvisioningUpdates
    - xcodebuild -archivePath SoSa.xcarchive -exportPath ../release/ios -exportOptionsPlist ~/ExportOptions.plist -exportArchive -allowProvisioningUpdates
  artifacts:
    paths:
      - release/ios

test:
  stage: test
  tags:
    - macos
  script:
    - echo "Future test job"

deploy-local:
  stage: deploy
  tags:
    - macos
  script:
    - export VERSION=$(node -pe "require('./package.json').version")
    - mkdir -p ~/release/ios/$VERSION
    - cp -R ./release ~/release/$VERSION

deploy-ios:
  stage: deploy
  tags:
    - macos
  script:
    - export VERSION=$(node -pe "require('./package.json').version")
    - appcenter distribute release -f ./release/ios/SoSa.ipa --app $APPCENTER_IOS_APP --group $APPCENTER_DISTRIBUTION
    - echo "Future deploy job"
